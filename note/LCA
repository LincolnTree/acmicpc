
最近公共祖先：求在同一棵树上的p,q的最近公共祖先；
思路：从根节点向下找，递归左子树和右子树，在子树中找到该节点时返回。若左右子树都找到了，则当前节点为最近祖先；若都没找到，返回null;
      否则返回当前找到了的节点；

TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
        if(root==NULL || root==p || root==q) return root;

        TreeNode* left = lowestCommonAncestor(root->left,p,q);
        TreeNode* right = lowestCommonAncestor(root->right,p,q);
        
        if(left!=NULL && right!=NULL)
            return root;
        
        if(left==NULL && right==NULL)
            return NULL;
        
        if(left!=NULL && right==NULL)
            return left;
        
        if(left==NULL && right!=NULL)
            return right;

        
    }
    
  参考：https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/discuss/65225/4-lines-C++JavaPythonRuby
